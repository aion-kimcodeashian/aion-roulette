{"code":"0x6050604052600160026000509090556064600360005090905560076005600050909055341561002e5760006000fd5b5b3360006000508282909180600101839055555050505b61004a565b610b06806100596000396000f300605060405236156100c2576000356c01000000000000000000000000900463ffffffff168063227cade5146100c65780632ca8c6d3146100f05780634081d9161461011a57806341c0e1b51461015e5780634b114691146101745780635075f2da146101bb578063590e1ae3146101e5578063b3c1c5b0146101fb578063c38a8afd1461023a578063d16170dd14610264578063e08a96cd1461027c578063e7b0f666146102a6578063f611e1c9146102d0578063fe5e1853146102fa576100c2565b5b5b005b34156100d25760006000fd5b6100da610324565b6040518082815260100191505060405180910390f35b34156100fc5760006000fd5b61010461032d565b6040518082815260100191505060405180910390f35b34156101265760006000fd5b61014460048080806010013590359091602001909192905050610336565b604051808215151515815260100191505060405180910390f35b341561016a5760006000fd5b6101726103b1565b005b34156101805760006000fd5b61019e600480808060100135903590916020019091929050506103db565b604051808381526010018281526010019250505060405180910390f35b34156101c75760006000fd5b6101cf61040f565b6040518082815260100191505060405180910390f35b34156101f15760006000fd5b6101f9610418565b005b34156102075760006000fd5b61021d600480803590601001909190505061047b565b604051808383825281601001526020019250505060405180910390f35b34156102465760006000fd5b61024e6104ae565b6040518082815260100191505060405180910390f35b61027a60048080359060100190919050506104b7565b005b34156102885760006000fd5b610290610612565b6040518082815260100191505060405180910390f35b34156102b25760006000fd5b6102ba61061b565b6040518082815260100191505060405180910390f35b34156102dc5760006000fd5b6102e4610624565b6040518082815260100191505060405180910390f35b34156103065760006000fd5b61030e61062d565b6040518082815260100191505060405180910390f35b60036000505481565b60046000505481565b60006000600090505b600a600050805490508110156103a1578383600a6000508381548110151561036357fe5b9060005260106000209050906002020160005b5080600101549054909114919014161561039357600191506103aa565b5b808060010191505061033f565b600091506103aa565b5092915050565b6000600050806001015490543390911491901416156103d857600060005080600101549054ff5b5b565b600b600050602052818160005260105260306000209050600091509150508060000160005054908060010160005054905082565b60096000505481565b60006000600050806001015490543390911491901416151561043a5760006000fd5b303190506000600050806001015490546108fc83908115029060405160006040518083038185898989f194505050505015156104765760006000fd5b5b5b50565b600a6000508181548110151561048d57fe5b9060005260106000209050906002020160005b915090508060010154905482565b60026000505481565b600560005054600460005054111515156104d15760006000fd5b600181101580156104e35750600a8111155b15156104ef5760006000fd5b600015156105023361033663ffffffff16565b15151415156105115760006000fd5b60026000505434101515156105265760006000fd5b34600b60005060003382528160100152602001908152601001600020905060005060000160005081909090555080600b60005060003382528160100152602001908152601001600020905060005060010160005081909090555060046000818150548092919060010191905090905550600a60005080548060010182816105ad9190610a0f565b91909060005260106000209050906002020160005b33909192909192509190909180600101839055555050346006600082828250540192505081909090555060056000505460046000505410151561060e5761060d61063663ffffffff16565b5b5b50565b60056000505481565b60076000505481565b60086000505481565b60066000505481565b60006005600050546004600050541015156106b5576001600a4381151561065957fe5b060190508060086000508190909055506106776106b963ffffffff16565b7f085498bc48ecf0627eddf2a22aae51b0d327d2d389c8b95043331974a01abecc6008600050546040518082815260100191505060405180910390a15b5b5b50565b6106c1610a43565b600060006000600060006000600060006000600560005054600460005054101515610994576000985060009750600096505b600a600050805490508710156107d657600a6000508781548110151561071557fe5b9060005260106000209050906002020160005b508060010154905495509550600860005054600b600050600088888252816010015260200190815260100160002090506000506001016000505414156107c85785858b8b60648110151561077857fe5b90906020020191909091828282528160100152602001505050600b600050600087878252816010015260200190815260100160002090506000506000016000505488019750875088806001019950505b5b86806001019750506106f3565b600089111561095c57600093505b8884101561094e57600060008b866064811015156107fe57fe5b9090602002018060100151905190911491901416151561083857898460648110151561082657fe5b90906020020180601001519051925092505b610883610877600660005054600b60005060008787825281601001526020019081526010016000209050600050600001600050546109a163ffffffff16565b896109e463ffffffff16565b9050898460648110151561089357fe5b909060200201806010015190516108fc83908115029060405160006040518083038185898989f194505050505015156108cc5760006000fd5b80600760008282825054019250508190909055507f0e73d440f472f97d0bc6b4eaf9caddef7f14e33205f2fcfdaaf8739f9cf864ac8b8660648110151561090f57fe5b909060200201806010015190518460405180848482528160100152602001828152601001935050505060405180910390a15b83806001019450506107e4565b600060066000508190909055505b6000600a6000508161096e9190610a73565b5060006004600050819090905550600960008181505480929190600101919050909055505b5b5b50505050505050505050565b600060008314156109b557600090506109de565b818302905080508183828115156109c857fe5b041415156109d65760006000fd5b8090506109de565b92915050565b60006000821115156109f65760006000fd5b8183811515610a0157fe5b049050610a09565b92915050565b815481835581811511610a3e576002028160020283600052601060002090509182019101610a3d9190610aa7565b5b505050565b610c80604051908101604052806064905b600060008252816010015260200190600190039081610a545790505090565b815481835581811511610aa2576002028160020283600052601060002090509182019101610aa19190610aa7565b5b505050565b610ad79190610ab1565b80821115610ad357600081815080600090556001016000905550600201610ab1565b5090565b905600a165627a7a72305820946505b6c08e8d36963899aa7ac9d045a2f47366b702adf7194f65af78eaf2540029","info":{"abiDefinition":[{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"maximumBet","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"numberOfBets","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":true,"payable":false,"inputs":[{"name":"player","type":"address"}],"name":"checkPlayerExists","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"kill","type":"function"},{"outputs":[{"name":"amountBet","type":"uint128"},{"name":"numberSelected","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"address"}],"name":"playerInfo","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"numberRound","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"refund","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"uint128"}],"name":"players","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"minimumBet","type":"function"},{"outputs":[],"constant":false,"payable":true,"inputs":[{"name":"numberSelected","type":"uint128"}],"name":"bet","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"maxAmountOfBets","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"totalPaid","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"lastLuckyAnimal","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"totalBet","type":"function"},{"outputs":[],"payable":false,"inputs":[],"name":"","type":"constructor"},{"outputs":[],"payable":true,"inputs":[],"name":"","type":"fallback"},{"outputs":[],"inputs":[{"indexed":false,"name":"value","type":"uint128"}],"name":"AnimalChosen","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":false,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint128"}],"name":"WinnerTransfer","anonymous":false,"type":"event"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\nlibrary SafeMath {\n  function mul(uint _a, uint _b) internal constant returns (uint c) {\n    if (_a == 0) {\n      return 0;\n    }\n    c = _a * _b;\n    require(c / _a == _b);\n    return c;\n  }\n\n  function div(uint _a, uint _b) internal constant returns (uint) {\n    require(_b > 0);\n    return _a / _b;\n  }\n\n  function sub(uint _a, uint _b) internal constant returns (uint) {\n    require(_b <= _a);\n    return _a - _b;\n  }\n\n  function add(uint _a, uint _b) internal constant returns (uint c) {\n    c = _a + _b;\n    require(c >= _a);\n    return c;\n  }\n}\n\ncontract Casino {\n  using SafeMath for uint;\n  address owner;\n  uint public minimumBet = 1;\n  uint public maximumBet = 100;\n  uint public numberOfBets;\n  uint public maxAmountOfBets = 7;\n  uint public totalBet;\n  uint public totalPaid;\n  uint public lastLuckyAnimal;\n  uint public numberRound;\n\n  address[] public players;\n\n  struct Player {\n    uint amountBet;\n    uint numberSelected;\n  }\n  mapping(address => Player) public playerInfo;\n\n  event AnimalChosen(uint value);\n  event WinnerTransfer(address to, uint value);\n\n  modifier onEndGame(){\n    if(numberOfBets >= maxAmountOfBets) _;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function Casino(){\n    owner = msg.sender;\n  }\n\n  function() public payable {}\n\n  function refund() public onlyOwner {\n    uint totalBalance = this.balance;\n    owner.transfer(totalBalance);\n  }\n\n  function kill() public {\n    if(msg.sender == owner) selfdestruct(owner);\n   }\n\n  function checkPlayerExists(address player) public constant returns(bool){\n    for(uint i = 0; i < players.length; i++){\n      if(players[i] == player) return true;\n    }\n    return false;\n  }\n\n  function bet(uint numberSelected) payable {\n    require(numberOfBets <= maxAmountOfBets);\n    require(numberSelected >= 1 && numberSelected <= 10);\n    require(checkPlayerExists(msg.sender) == false);\n    require(msg.value >= minimumBet);\n\n    playerInfo[msg.sender].amountBet = msg.value;\n    playerInfo[msg.sender].numberSelected = numberSelected;\n    numberOfBets++;\n\n    players.push(msg.sender);\n    totalBet += msg.value;\n\n    if(numberOfBets >= maxAmountOfBets) generateNumberWinner();\n  }\n\n  function generateNumberWinner() private onEndGame {\n    uint numberGenerated = block.number % 10 + 1;\n    lastLuckyAnimal = numberGenerated;\n    distributePrizes();\n\n    AnimalChosen(lastLuckyAnimal);\n  }\n\n  function distributePrizes() private onEndGame {\n    address[100] memory winners;\n    uint count = 0;\n    uint winnerBetPool = 0;\n\n    for(uint i = 0; i < players.length; i++){\n       address playerAddress = players[i];\n       if(playerInfo[playerAddress].numberSelected == lastLuckyAnimal){\n          winners[count] = playerAddress;\n          winnerBetPool += playerInfo[playerAddress].amountBet;\n          count++;\n       }\n    }\n\n    if (count > 0) {\n      for(uint j = 0; j < count; j++){\n        if(winners[j] != address(0))\n        address playerAddressW = winners[j];\n        uint winnerAIONAmount = SafeMath.div(SafeMath.mul(totalBet, playerInfo[playerAddressW].amountBet), winnerBetPool);\n        winners[j].transfer(winnerAIONAmount);\n\n        totalPaid += winnerAIONAmount;\n        WinnerTransfer(winners[j], winnerAIONAmount);\n      }\n      totalBet = 0;\n    }\n\n\t  players.length = 0;\n    numberOfBets = 0;\n    numberRound++;\n  }\n}\n"}}
